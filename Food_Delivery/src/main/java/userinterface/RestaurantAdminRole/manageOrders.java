/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.RestaurantAdminRole;

import Business.Customer.Customer;
import Business.Customer.CustomerDirectory;
import Business.DeliveryMan.DeliveryMan;
import Business.DeliveryMan.DeliveryManDirectory;
import Business.EcoSystem;
import Business.Order.FinalOrder;
import Business.Order.Order;
import Business.Restaurant.Restaurant;
import Business.Restaurant.RestaurantDirectory;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.plaf.basic.BasicInternalFrameTitlePane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ram.a
 */
public class manageOrders extends javax.swing.JPanel {

    /**
     * Creates new form manageOrders
     */
    
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    UserAccount ua;
    Restaurant resto;
    RestaurantDirectory rd;
    CustomerDirectory cd;
    ArrayList<FinalOrder> ordersList;
    DeliveryManDirectory dd;
    public manageOrders(JPanel userProcessContainer,Restaurant resto,EcoSystem ecosystem) {
        this.userProcessContainer = userProcessContainer;
        this.resto = resto;
        this.ecosystem = ecosystem;
        initComponents();
        populatetree();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ordersAvailble = new javax.swing.JTable();
        btnAccept = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        statusOrders = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        delDropDown = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        delCusto = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        delItem = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        delList = new javax.swing.JComboBox<>();
        btnAssignDel = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText("All available Orders");

        ordersAvailble.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer", "Item", "Date"
            }
        ));
        jScrollPane1.setViewportView(ordersAvailble);

        btnAccept.setText("Accept");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        jLabel2.setText("Current and previous orders");

        statusOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer", "Item", "status", "Delivery", "Comment", "OrderId", "Order date"
            }
        ));
        jScrollPane3.setViewportView(statusOrders);

        jLabel3.setText("Assign DeliveryMan");

        delDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delDropDownActionPerformed(evt);
            }
        });

        jLabel4.setText("OrderId");

        jLabel5.setText("Customer:");

        delCusto.setEditable(false);
        delCusto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delCustoActionPerformed(evt);
            }
        });

        jLabel6.setText("Item");

        delItem.setEditable(false);

        jLabel7.setText("DeliveryMan");

        btnAssignDel.setText("assign");
        btnAssignDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignDelActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(226, 226, 226)
                                .addComponent(btnAccept))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(delDropDown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(delCusto)
                                    .addComponent(delList, 0, 100, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(delItem, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnAssignDel)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 52, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAccept)
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(delCusto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(delItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(delList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAssignDel))
                .addContainerGap(31, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        // TODO add your handling code here:
        
        if(resto.getAcceptedOrders() == null)
            resto.setAcceptedOrders(new ArrayList<FinalOrder>());
        ArrayList<FinalOrder> orders = resto.getAcceptedOrders();
        rd = ecosystem.getRestaurantDirectory();
        int orderId = rd.generateOrderId();
        FinalOrder fo = new FinalOrder();
        DefaultTableModel df = (DefaultTableModel) ordersAvailble.getModel();
        
          int selectedRow = ordersAvailble.getSelectedRow();
          String customer = df.getValueAt(selectedRow,0).toString();
          String item = df.getValueAt(selectedRow, 1).toString();
          String date = df.getValueAt(selectedRow,2).toString();
          fo.setOrderId(String.valueOf(orderId));
          fo.setCustomer(customer);
          fo.setItem(item);
          fo.setDate(date);
          fo.setRestaurant(resto.getName());
          fo.setStatus("Order Accepted");
          orders.add(fo);
          df.removeRow(selectedRow);
          populatetree();
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void delCustoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delCustoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_delCustoActionPerformed

    private void delDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delDropDownActionPerformed
        // TODO add your handling code here:
        String orderId =(String) delDropDown.getSelectedItem();
        DefaultComboBoxModel df = new DefaultComboBoxModel();
        rd = ecosystem.getRestaurantDirectory();
        FinalOrder f = rd.getOrder(orderId);
        delCusto.setText(f.getCustomer());
        delItem.setText(f.getItem());
        dd = ecosystem.getDeliveryManDirectory();
        ArrayList<DeliveryMan> deliveryMen = dd.getDeliveryDirectory();
        for(DeliveryMan d: deliveryMen)
        {
            df.addElement(d.getName());
        }
        delList.setModel(df);
    }//GEN-LAST:event_delDropDownActionPerformed

    private void btnAssignDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignDelActionPerformed
        // TODO add your handling code here:
        String orderId =(String) delDropDown.getSelectedItem();
        rd = ecosystem.getRestaurantDirectory();
        FinalOrder f = rd.getOrder(orderId);
        f.setDeliveryMan((String) delList.getSelectedItem());
        f.setStatus("DeliveryMan Assigned");
        populatetree();
        delCusto.setText("");
        delItem.setText("");
    }//GEN-LAST:event_btnAssignDelActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        CardLayout crdLyt = (CardLayout) userProcessContainer.getLayout();
            crdLyt.show(userProcessContainer,"RestaurantAdmin");
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnAssignDel;
    private javax.swing.JTextField delCusto;
    private javax.swing.JComboBox<String> delDropDown;
    private javax.swing.JTextField delItem;
    private javax.swing.JComboBox<String> delList;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable ordersAvailble;
    private javax.swing.JTable statusOrders;
    // End of variables declaration//GEN-END:variables

    private void populatetree() {
        String resoName = resto.getName();
        cd = ecosystem.getCustomerDirectory();
        DefaultTableModel dt = (DefaultTableModel) ordersAvailble.getModel();
        dt.setRowCount(0);
        ArrayList<Customer> customers = cd.getCustomerList();
        for(Customer c: customers)
        {
            ArrayList<Order> orders = c.getPreviousOrders();
            for(Order o: orders)
            {
                if(o.getRestaurant().equals(resoName))
                {
                    String[] row = {c.getCustomerName(),o.getItem(),o.getEntryDateTime().toString()};
                    dt.addRow(row);
                }
            }
        }
        
        ordersAvailble.setModel(dt);
        
        ArrayList<FinalOrder> orders = resto.getAcceptedOrders();
        DefaultTableModel df = (DefaultTableModel) statusOrders.getModel();
        DefaultComboBoxModel dc = new DefaultComboBoxModel();
        df.setRowCount(0);
        for(FinalOrder f: orders)
        {
            String[] row = {f.getCustomer(),f.getItem(),f.getStatus(),f.getDeliveryMan(),f.getReview(),f.getOrderId(),f.getDate()};
            df.addRow(row);
            if(f.getDeliveryMan() == null)
            dc.addElement(f.getOrderId());
        }
        
        statusOrders.setModel(df);
        delDropDown.setModel(dc);
        
    }
}
